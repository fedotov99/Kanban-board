package client;

import common.Task;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;

public class EditTaskView {
    static Task task;
    private JPanel editPanel;
    JLabel descriptionLabel = new JLabel("Description:");
    JLabel priorityLabel = new JLabel("Priority:");
    JTextField descriptionText = new JTextField();
    JTextField priorityText = new JTextField();
    JButton saveButton = new JButton("Save");
    JButton deleteButton = new JButton("Delete");

    public EditTaskView(Task task) {
        editPanel.setLayout(new GridLayout(0, 1));
        editPanel.setSize(new Dimension(300, 300));
        editPanel.add(descriptionLabel);
        editPanel.add(descriptionText);
        editPanel.add(priorityLabel);
        editPanel.add(priorityText);
        editPanel.add(saveButton);
        editPanel.add(deleteButton);
        displayTask(task);

        saveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                EditTaskView.task.setDescription(descriptionText.getText());
                EditTaskView.task.setPriority(Integer.valueOf(priorityText.getText()));
                try {
                    EditTaskView.task.setLocked(false);
                    ClientSocketOpenedHandler.patchTaskOnServer(EditTaskView.task);
                    Client.editTaskView.getEditPanel().setVisible(false);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
        deleteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                try {
                    ClientSocketOpenedHandler.deleteTaskOnServer(EditTaskView.task.getId());
                    Client.editTaskView.getEditPanel().setVisible(false);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public void displayTask(Task task) {
        if (Client.createTaskView != null) {
            Client.createTaskView.getCreatePanel().setVisible(false);
        }
        EditTaskView.task = task;
        this.descriptionText.setText(task.getDescription());
        this.priorityText.setText(String.valueOf(task.getPriority()));

        Client.jFrame.revalidate();
    }

    public JPanel getEditPanel() {
        return editPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        editPanel = new JPanel();
        editPanel.setLayout(new GridBagLayout());
        editPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16777216)), null));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return editPanel;
    }

}
