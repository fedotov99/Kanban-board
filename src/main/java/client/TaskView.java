package client;

import common.Task;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;

public class TaskView {
    private JPanel taskPanel;
    private JLabel dl;
    private JLabel descriptionLabel;
    private JLabel pl;
    private JLabel priorityLabel;
    private JButton editButton;
    private Task task;

    public TaskView() {
        taskPanel.setMinimumSize(new Dimension(200, 300));
        editButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                task.setLocked(true);
                try {
                    ClientSocketOpenedHandler.patchTaskOnServer(task);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                if (Client.editTaskView == null) {
                    EditTaskView editTaskView = new EditTaskView(task);
                    Client.editTaskView = editTaskView;
                    Client.jFrame.getContentPane().add(editTaskView.getEditPanel());
                    Client.jFrame.revalidate();
                } else {
                    Client.editTaskView.getEditPanel().setVisible(true);
                    Client.editTaskView.displayTask(task);
                }
            }
        });
    }

    public void addTaskToView(Task task) {
        descriptionLabel.setText(task.getDescription());
        priorityLabel.setText(Integer.toString(task.getPriority()));
        this.task = task;
        if (task.isLocked())
            editButton.setVisible(false);
    }

    public JPanel getTaskPanel() {
        return taskPanel;
    }

    public void setTaskPanel(JPanel taskPanel) {
        this.taskPanel = taskPanel;
    }

    public JLabel getDl() {
        return dl;
    }

    public void setDl(JLabel dl) {
        this.dl = dl;
    }

    public JLabel getDescriptionLabel() {
        return descriptionLabel;
    }

    public void setDescriptionLabel(JLabel descriptionLabel) {
        this.descriptionLabel = descriptionLabel;
    }

    public JLabel getPl() {
        return pl;
    }

    public void setPl(JLabel pl) {
        this.pl = pl;
    }

    public JLabel getPriorityLabel() {
        return priorityLabel;
    }

    public void setPriorityLabel(JLabel priorityLabel) {
        this.priorityLabel = priorityLabel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        taskPanel = new JPanel();
        taskPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        taskPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        dl = new JLabel();
        dl.setText("Description:");
        taskPanel.add(dl, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        descriptionLabel = new JLabel();
        descriptionLabel.setText("Label");
        taskPanel.add(descriptionLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pl = new JLabel();
        pl.setText("Priority:");
        taskPanel.add(pl, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        priorityLabel = new JLabel();
        priorityLabel.setText("Label");
        taskPanel.add(priorityLabel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        editButton = new JButton();
        editButton.setText("Edit");
        taskPanel.add(editButton, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return taskPanel;
    }

}
